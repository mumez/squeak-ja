'From Squeak4.3 of 22 December 2011 [latest update: #11860] on 22 July 2012 at 4:19:29 pm'!"Change Set:		DevToolsTransMore-muDate:			22 July 2012Author:			Masashi UmezawaAdded more #translated in dev tools menus"!!ClassDescription methodsFor: 'instance variables' stamp: 'mu 7/22/2012 16:05'!chooseInstVarAlphabeticallyThenDo: aBlock	| allVars index |	"Put up a menu of all the instance variables in the receiver, presented in alphabetical order, and when the user chooses one, evaluate aBlock with the chosen variable as its parameter."	allVars := self allInstVarNames asSortedArray.	allVars isEmpty ifTrue: [^ self inform: 'There are no instance variables' translated].	index := (UIManager default chooseFrom: allVars lines: #() title: ('Instance variables in {1}' translated format: {self name})).	index = 0 ifTrue: [^ self].	aBlock value: (allVars at: index)! !!ClassDescription methodsFor: 'instance variables' stamp: 'mu 7/22/2012 16:05'!chooseInstVarThenDo: aBlock 	"Put up a menu of all the instance variables in the receiver, and whenthe user chooses one, evaluate aBlock with the chosen variable as itsparameter.  If the list is 6 or larger, then offer an alphabeticalformulation as an alternative. triggered by a 'show alphabetically' itemat the top of the list."	| lines labelStream allVars index count offerAlpha |	(count := self allInstVarNames size) = 0 ifTrue: 		[^ self inform: 'There are noinstance variables.' translated].	allVars := OrderedCollection new.	lines := OrderedCollection new.	labelStream := WriteStream on: (String new: 200).	(offerAlpha := count > 5)		ifTrue:			[lines add: 1.			allVars add: 'show alphabetically' translated.			labelStream nextPutAll: allVars first; cr].	self withAllSuperclasses reverseDo:		[:class | | vars |		vars := class instVarNames.		vars do:			[:var |			labelStream nextPutAll: var; cr.			allVars add: var].		vars isEmpty ifFalse: [lines add: allVars size]].	labelStream skip: -1 "cut last CR".	(lines size > 0 and: [lines last = allVars size]) ifTrue:		[lines removeLast].  "dispense with inelegant line beneath last item"	index := (UIManager default chooseFrom: (labelStream contents subStrings: {Character cr}) lines: linestitle: ('Instance variables in {1}' translated format: {self name})).	index = 0 ifTrue: [^ self].	(index = 1 and: [offerAlpha]) ifTrue: [^ selfchooseInstVarAlphabeticallyThenDo: aBlock].	aBlock value: (allVars at: index)! !!ClassDescription methodsFor: 'instance variables' stamp: 'mu 7/22/2012 16:04'!chooseVarThenDo: aBlock 	"Put up a menu of all the instance variables in the receiver, and whenthe user chooses one, evaluate aBlock with the chosen variable as itsparameter."	| lines labelStream allVars index |	(self allInstVarNames size + self theNonMetaClass allClassVarNames size) = 0 ifTrue: [ ^ self inform: 'There are no variables.' ].	allVars := OrderedCollection new.	lines := OrderedCollection new.	labelStream := WriteStream on: (String new: 200).	self withAllSuperclasses reverseDo:		[ : class | | vars |		vars := class instVarNames , class theNonMetaClass classVarNames.		vars do:			[ : var | labelStream				 nextPutAll: var ;				 cr.			allVars add: var ].		vars isEmpty ifFalse: [ lines add: allVars size ] ].	labelStream skip: -1.	"cut last CR"	(lines size > 0 and: [ lines last = allVars size ]) ifTrue: [ lines removeLast ].	"dispense with inelegant line beneath last item"	index := UIManager default		chooseFrom: (labelStream contents subStrings: {Character cr})		lines: lines		title: ('Variables in {1}' translated format: {self name}).	index = 0 ifTrue: [ ^ self ].	aBlock value: (allVars at: index)! !!MenuMorph methodsFor: 'keystroke helpers' stamp: 'mu 7/22/2012 16:17'!showKeyboardHelp	| help |	help := BalloonMorph 		string: 'Enter text to\narrow selection down\to matching items ' translated withCRs 		for: self 		corner: #topLeft.	help popUpForHand: self activeHand! !!UndeclaredVariable methodsFor: 'as yet unclassified' stamp: 'mu 7/22/2012 15:53'!openMenuIn: aBlock 	| alternatives labels actions lines caption choice |	alternatives := parser possibleVariablesFor: name.	labels := OrderedCollection new.	actions := OrderedCollection new.	lines := OrderedCollection new.	name first isLowercase 		ifTrue: 			[labels add: 'declare method temp'.			actions add: [parser declareTemp: name at: #method].			labels add: 'declare block-local temp'.			actions add: [parser declareTemp: name at: #block].			parser canDeclareInstanceVariable 				ifTrue: 					[labels add: 'declare instance'.					actions add: [parser declareInstVar: name]]]		ifFalse: 			[labels add: 'define new class'.			actions add: [parser defineClass: name].			labels add: 'declare global'.			actions add: [parser declareGlobal: name].			parser canDeclareClassVariable 				ifTrue: 					[labels add: 'declare class variable'.					actions add: [parser declareClassVar: name]]].	lines add: labels size.	alternatives do: 		[:each | 		labels add: each.		actions add: [parser substituteVariable: each atInterval: interval]].	lines add: labels size.	labels add: 'cancel'.	labels := labels collect: [:each | each translated].	caption := 'Unknown variable: ' translated, name , ' please correct, or cancel:' translated.	choice := aBlock value: labels value: lines value: caption.	self resume: (actions at: choice ifAbsent: [nil])! !!UnknownSelector methodsFor: 'as yet unclassified' stamp: 'mu 7/22/2012 15:54'!openMenuIn: aBlock	| alternatives labels lines caption choice |	alternatives := Symbol possibleSelectorsFor: name.	labels := Array streamContents:				[:s | s nextPut: name; nextPutAll: alternatives; nextPut: 'cancel' translated].	lines := {1. alternatives size + 1}.	caption := 'Unknown selector, please\confirm, correct, or cancel' translated withCRs.		choice := aBlock value: labels value: lines value: caption.	choice = 0 ifTrue: [self resume: nil].	choice = 1 ifTrue: [self resume: name asSymbol].	choice = labels size ifTrue: [self resume: nil].	self resume: (alternatives at: choice - 1)! !!UserDialogBoxMorph methodsFor: 'constructing' stamp: 'mu 7/22/2012 15:56'!title: aString	titleMorph contents: aString translated! !