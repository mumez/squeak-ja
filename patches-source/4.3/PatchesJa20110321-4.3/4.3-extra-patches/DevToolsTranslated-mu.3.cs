'From Squeak4.3 of 22 December 2011 [latest update: #11860] on 15 July 2012 at 2:42:46 pm'!"Change Set:		DevToolsTranslated-muDate:			22 June 2009Author:			Masashi UmezawaAdded #translated sendings to some minor menu items"!!ClassDescription methodsFor: 'instance variables' stamp: 'mu 6/21/2009 23:36'!chooseInstVarAlphabeticallyThenDo: aBlock	| allVars index |	"Put up a menu of all the instance variables in the receiver, presented in alphabetical order, and when the user chooses one, evaluate aBlock with the chosen variable as its parameter."	allVars := self allInstVarNames asSortedArray.	allVars isEmpty ifTrue: [^ self inform: 'There are no instance variables' translated].	index := (UIManager default chooseFrom: allVars lines: #() title: 'Instance variables in', self name).	index = 0 ifTrue: [^ self].	aBlock value: (allVars at: index)! !!ClassDescription methodsFor: 'instance variables' stamp: 'mu 4/25/2010 00:59'!chooseInstVarThenDo: aBlock 	"Put up a menu of all the instance variables in the receiver, and whenthe user chooses one, evaluate aBlock with the chosen variable as itsparameter.  If the list is 6 or larger, then offer an alphabeticalformulation as an alternative. triggered by a 'show alphabetically' itemat the top of the list."	| lines labelStream allVars index count offerAlpha |	(count := self allInstVarNames size) = 0 ifTrue: 		[^ self inform: 'There are noinstance variables.' translated].	allVars := OrderedCollection new.	lines := OrderedCollection new.	labelStream := WriteStream on: (String new: 200).	(offerAlpha := count > 5)		ifTrue:			[lines add: 1.			allVars add: 'show alphabetically' translated.			labelStream nextPutAll: allVars first; cr].	self withAllSuperclasses reverseDo:		[:class | | vars |		vars := class instVarNames.		vars do:			[:var |			labelStream nextPutAll: var; cr.			allVars add: var].		vars isEmpty ifFalse: [lines add: allVars size]].	labelStream skip: -1 "cut last CR".	(lines size > 0 and: [lines last = allVars size]) ifTrue:		[lines removeLast].  "dispense with inelegant line beneath last item"	index := (UIManager default chooseFrom: (labelStream contents subStrings: {Character cr}) lines: linestitle: 'Instance variables in', self name).	index = 0 ifTrue: [^ self].	(index = 1 and: [offerAlpha]) ifTrue: [^ selfchooseInstVarAlphabeticallyThenDo: aBlock].	aBlock value: (allVars at: index)! !!CodeHolder methodsFor: 'categories' stamp: 'mu 4/25/2010 00:59'!categoryFromUserWithPrompt: aPrompt for: aClass	"self new categoryFromUserWithPrompt: 'testing' for: SystemDictionary"	|  labels myCategories reject lines newName menuIndex | 	labels := OrderedCollection with: 'new...' translated.	labels addAll: (myCategories := aClass organization categories asSortedCollection:		[:a :b | a asLowercase < b asLowercase]).	reject := myCategories asSet.	reject		add: ClassOrganizer nullCategory;		add: ClassOrganizer default.	lines := OrderedCollection with: 1 with: (myCategories size + 1).	aClass allSuperclasses do:		[:cls |			| cats |			cats := cls organization categories reject:				 [:cat | reject includes: cat].			cats isEmpty ifFalse:				[lines add: labels size.				labels addAll: (cats asSortedCollection:					[:a :b | a asLowercase < b asLowercase]).				reject addAll: cats]].	newName := (labels size = 1 or:		[menuIndex := (UIManager default chooseFrom: labels lines: lines title: aPrompt).		menuIndex = 0 ifTrue: [^ nil].		menuIndex = 1])			ifTrue:				[UIManager default request: 'Please type new category name' translated					initialAnswer: 'category name']			ifFalse: 				[labels at: menuIndex].	^ newName ifNotNil: [newName asSymbol]! !!Browser methodsFor: 'class functions' stamp: 'mu 7/15/2012 14:41'!copyClass	| originalClass originalName copysName |	self hasClassSelected ifFalse: [^ self].	self okToChange ifFalse: [^ self].	originalClass := self selectedClass.	originalName := originalClass name.	copysName := self request: 'Please type new class name' translated initialAnswer: originalName.	copysName = '' ifTrue: [^ self].  " Cancel returns '' "	copysName := copysName asSymbol.	copysName = originalName ifTrue: [^ self].	(Smalltalk hasClassNamed: copysName)		ifTrue: [^ self error: copysName , ' already exists' translated].	Cursor wait showWhile: [		| newDefinition newMetaDefinition newClass |		newDefinition := originalClass definition			copyReplaceAll: originalName printString			with: copysName printString.		newClass := Compiler evaluate: newDefinition logged: true.		newMetaDefinition := originalClass class definition			copyReplaceAll: originalClass class name			with: newClass class name.		Compiler evaluate: newMetaDefinition logged: true.		newClass copyAllCategoriesFrom: originalClass.		newClass class copyAllCategoriesFrom: originalClass class.		originalClass hasComment ifTrue: [			newClass comment: originalClass comment ] ].	self classListIndex: 0.	self changed: #classList! !!Browser methodsFor: 'class functions' stamp: 'mu 7/15/2012 14:41'!renameClass	| oldName newName obs |	self hasClassSelected ifFalse: [^ self].	self okToChange		ifFalse: [^ self].	oldName := self selectedClass name.	newName := self request: 'Please type new class name' translated initialAnswer: oldName.	newName = ''		ifTrue: [^ self].	"Cancel returns ''"	newName := newName asSymbol.	newName = oldName		ifTrue: [^ self].	(self selectedClass environment includesKey: newName)		ifTrue: [^ self error: newName , ' already exists' translated].	self selectedClass rename: newName.	selectedClassName := newName.	self changed: #classList.	obs := self systemNavigation				allCallsOn: (self selectedClass environment associationAt: newName).	obs isEmpty		ifFalse: [self systemNavigation				browseMessageList: obs				name: 'Obsolete References to ' , oldName				autoSelect: oldName].	self selectClassNamed: newName.! !!Browser methodsFor: 'message category functions' stamp: 'mu 7/15/2012 14:27'!addCategory	"Present a choice of categories or prompt for a new category name and add it before the current selection, or at the end if no current selection"	| labels reject lines menuIndex newName oldCategory |	self okToChange ifFalse: [^ self].	self hasClassSelected ifFalse: [^ self].	labels := OrderedCollection with: 'new...' translated.	reject := Set new.	reject		addAll: self selectedClassOrMetaClass organization categories;		add: ClassOrganizer nullCategory;		add: ClassOrganizer default.	lines := OrderedCollection new.	self selectedClassOrMetaClass allSuperclasses do: [:cls | | cats |		cls = Object ifFalse: [			cats := cls organization categories reject:				 [:cat | reject includes: cat].			cats isEmpty ifFalse: [				lines add: labels size.				labels addAll: cats asSortedCollection.				reject addAll: cats]]].	newName := (labels size = 1 or: [		menuIndex := (UIManager default chooseFrom: labels lines: lines title: 'Add Category' translated).		menuIndex = 0 ifTrue: [^ self].		menuIndex = 1])			ifTrue: [				self request: 'Please type new category name' translated					initialAnswer: 'category name' translated]			ifFalse: [				labels at: menuIndex].	oldCategory := self selectedMessageCategoryName.	newName isEmpty		ifTrue: [^ self]		ifFalse: [newName := newName asSymbol].	self classOrMetaClassOrganizer		addCategory: newName		before: (self hasMessageCategorySelected				ifFalse: [nil]				ifTrue: [self selectedMessageCategoryName]).	self changed: #messageCategoryList.	self selectMessageCategoryNamed:		(oldCategory isNil			ifTrue: [self classOrMetaClassOrganizer categories last]			ifFalse: [oldCategory]).	self changed: #messageCategoryList.! !!Browser methodsFor: 'message category functions' stamp: 'mu 7/15/2012 14:39'!renameCategory	"Prompt for a new category name and add it before the	current selection, or at the end if no current selection"	| oldName newName |	self hasClassSelected ifFalse: [^ self].	self okToChange ifFalse: [^ self].	self hasMessageCategorySelected ifFalse: [^ self].			oldName := self selectedMessageCategoryName.	newName := self		request: 'Please type new category name' translated		initialAnswer: oldName.	newName isEmpty		ifTrue: [^ self]		ifFalse: [newName := newName asSymbol].	newName = oldName ifTrue: [^ self].	self classOrMetaClassOrganizer		renameCategory: oldName		toBe: newName.	self selectClassNamed: selectedClassName.	self selectMessageCategoryNamed: oldName.	self changed: #messageCategoryList.! !!Browser methodsFor: 'system category functions' stamp: 'mu 7/15/2012 14:34'!addSystemCategory	"Prompt for a new category name and add it before the	current selection, or at the end if no current selection"	| oldSelection newName |	self okToChange ifFalse: [^ self].	oldSelection := self selectedSystemCategory.	newName := self		request: 'Please type new category name' translated		initialAnswer: 'Category-Name'.	newName isEmpty		ifTrue: [^ self]		ifFalse: [newName := newName asSymbol].	systemOrganizer		addCategory: newName		before: self selectedSystemCategory.	self selectSystemCategory:		(oldSelection isNil			ifTrue: [ self systemCategoryList last ]			ifFalse: [ oldSelection ]).	self changed: #systemCategoryList.! !!Browser methodsFor: 'system category functions' stamp: 'mu 7/15/2012 14:42'!renameSystemCategory	"Prompt for a new category name and add it before the	current selection, or at the end if no current selection"	| oldSelection newName |	oldSelection := self selectedSystemCategory.	oldSelection isNil		ifTrue: [^ self].  "no selection"	self okToChange ifFalse: [^ self].		newName := self		request: 'Please type new category name' translated		initialAnswer: oldSelection.	newName isEmpty		ifTrue: [^ self]		ifFalse: [newName := newName asSymbol].	oldSelection = newName ifTrue: [^ self].	systemOrganizer		renameCategory: oldSelection		toBe: newName.	self selectSystemCategory: newName.	self changed: #systemCategoryList.! !!FileContentsBrowser methodsFor: 'class list' stamp: 'mu 6/7/2009 23:00'!renameClass	| oldName newName |	classListIndex = 0 ifTrue: [^ self].	self okToChange ifFalse: [^ self].	oldName := self selectedClass name.	newName := (self request: 'Please type new class name' translated						initialAnswer: oldName) asSymbol.	(newName isEmpty or:[newName = oldName]) ifTrue: [^ self].	(self selectedPackage classes includesKey: newName)		ifTrue: [^ self error: newName , ' already exists in the package'].	systemOrganizer classify: newName under: self selectedSystemCategoryName.	systemOrganizer removeElement: oldName.	self selectedPackage renameClass: self selectedClass to: newName.	self changed: #classList.	self classListIndex: ((systemOrganizer listAtCategoryNamed: self selectedSystemCategoryName) indexOf: newName).! !!Morph methodsFor: 'debug and other' stamp: 'mu 4/25/2010 01:03'!buildDebugMenu: aHand	"Answer a debugging menu for the receiver.  The hand argument is seemingly historical and plays no role presently"	| aMenu aPlayer |	aMenu := MenuMorph new defaultTarget: self.	aMenu addStayUpItem.	(self hasProperty: #errorOnDraw) ifTrue:		[aMenu add: 'start drawing again' translated action: #resumeAfterDrawError.		aMenu addLine].	(self hasProperty: #errorOnStep) ifTrue:		[aMenu add: 'start stepping again' translated action: #resumeAfterStepError.		aMenu addLine].	aMenu add: 'inspect morph' translated action: #inspectInMorphic:.	aMenu add: 'inspect owner chain' translated action: #inspectOwnerChain.	Smalltalk isMorphic ifFalse:		[aMenu add: 'inspect morph (in MVC)' translated action: #inspect].	self isMorphicModel ifTrue:		[aMenu add: 'inspect model' translated target: self model action: #inspect].	(aPlayer := self player) ifNotNil:		[aMenu add: 'inspect player' translated target: aPlayer action: #inspect].     aMenu add: 'explore morph' translated target: self selector: #explore.	aMenu addLine.	aPlayer ifNotNil:		[ aMenu add: 'viewer for Player' translated target: self player action: #beViewed.	aMenu balloonTextForLastItem: 'Opens a viewer on my Player -- this is the same thing you get if you click on the cyan "View" halo handle' translated ].	aMenu add: 'viewer for Morph' translated target: self action: #viewMorphDirectly.	aMenu balloonTextForLastItem: 'Opens a Viewer on this Morph, rather than on its Player' translated.	aMenu addLine.	aPlayer ifNotNil:		[aPlayer class isUniClass ifTrue: [			aMenu add: 'browse player class' translated target: aPlayer action: #browseHierarchy]].	aMenu add: 'browse morph class' translated target: self selector: #browseHierarchy.	(self isMorphicModel)		ifTrue: [aMenu				add: 'browse model class' translated				target: self model				selector: #browseHierarchy].	aMenu addLine.	self addViewingItemsTo: aMenu.	aMenu 		add: 'make own subclass' translated action: #subclassMorph;		add: 'save morph in file' translated  action: #saveOnFile;		addLine;		add: 'call #tempCommand' translated action: #tempCommand;		add: 'define #tempCommand' translated action: #defineTempCommand;		addLine;		add: 'control-menu...' translated target: self selector: #invokeMetaMenu:;		add: 'edit balloon help' translated action: #editBalloonHelpText.	^ aMenu! !