'From Squeak4.1 of 17 April 2010 [latest update: #9957] on 25 April 2010 at 12:38:20 am'!"Change Set:		DoItLogBlanksTrimmedFix-muDate:			9 February 2008Author:			Masashi UmezawaFix to trim leading and trailing blanks of 'do it' log.This is necessary because if there are leading spaces in 'do it' and the expression includes multibyte string, change log parsing (ChangeList>>scanFile:from:to:) will fail."!!Compiler methodsFor: 'public access' stamp: 'mu 4/25/2010 00:38'!evaluate: textOrStream in: aContext to: receiver notifying: aRequestor ifFail: failBlock logged: logFlag	"Compiles the sourceStream into a parse tree, then generates code into a 	method. This method is then installed in the receiver's class so that it 	can be invoked. In other words, if receiver is not nil, then the text can 	refer to instance variables of that receiver (the Inspector uses this). If 	aContext is not nil, the text can refer to temporaries in that context (the 	Debugger uses this). If aRequestor is not nil, then it will receive a 	notify:at: message before the attempt to evaluate is aborted. Finally, the 	compiled method is invoked from here as DoIt or (in the case of 	evaluation in aContext) DoItIn:. The method is subsequently removed 	from the class, but this will not get done if the invocation causes an 	error which is terminated. Such garbage can be removed by executing: 	Smalltalk allBehaviorsDo: [:cl | cl removeSelector: #DoIt; removeSelector: 	#DoItIn:]."	| methodNode method value toLog itsSelection itsSelectionString |	class := (aContext == nil ifTrue: [receiver] ifFalse: [aContext receiver]) class.	self from: textOrStream class: class context: aContext notifying: aRequestor.	methodNode := self translate: sourceStream noPattern: true ifFail:		[^failBlock value].	method := self interactive ifTrue: [ 	methodNode generateWithTempNames ] 		ifFalse: [methodNode generate].		value := receiver				withArgs: (context ifNil: [#()] ifNotNil: [{context}])				executeMethod: method.	logFlag ifTrue:[		toLog := ((requestor respondsTo: #selection)  			and:[(itsSelection := requestor selection) notNil			and:[(itsSelectionString := itsSelection asString) isEmptyOrNil not]])				ifTrue:[itsSelectionString]				ifFalse:[sourceStream contents].		SystemChangeNotifier uniqueInstance evaluated: toLog withBlanksTrimmed context: aContext].	^ value! !